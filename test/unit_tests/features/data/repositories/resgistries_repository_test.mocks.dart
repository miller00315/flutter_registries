// Mocks generated by Mockito 5.2.0 from annotations
// in product_manager/test/unit_tests/features/data/repositories/resgistries_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:product_manager/src/features/data/datasources/registries_datasource.dart'
    as _i2;
import 'package:product_manager/src/features/data/models/registry_model.dart'
    as _i5;
import 'package:product_manager/src/features/domain/entities/registry.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [RegistriesDataSourceBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegistriesDataSourceBase extends _i1.Mock
    implements _i2.RegistriesDataSourceBase {
  MockRegistriesDataSourceBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.Registry>> startWatchRegistries() =>
      (super.noSuchMethod(Invocation.method(#startWatchRegistries, []),
              returnValue: Stream<List<_i4.Registry>>.empty())
          as _i3.Stream<List<_i4.Registry>>);
  @override
  _i3.Future<dynamic> postRegistry(_i5.RegistryModel? registry) =>
      (super.noSuchMethod(Invocation.method(#postRegistry, [registry]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<List<_i4.Registry>> getRegistries() =>
      (super.noSuchMethod(Invocation.method(#getRegistries, []),
              returnValue: Future<List<_i4.Registry>>.value(<_i4.Registry>[]))
          as _i3.Future<List<_i4.Registry>>);
  @override
  _i3.Future<dynamic> stopWatchRegistries() =>
      (super.noSuchMethod(Invocation.method(#stopWatchRegistries, []),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
}
